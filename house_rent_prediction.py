# -*- coding: utf-8 -*-
"""House Rent Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a03zNtIm1xwTotKwzeQbDQaaZnDbkx2P

# House Rent Prediction System

This Python project guides you through building a machine learning model to predict house rents based on property features. Below is a step-by-step breakdown, followed by the complete code implementation.

## Project Steps (From Scratch)

1. **Setup Environment**
   - Create a project folder and navigate into it:
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# 1. Load Data
try:
    data = pd.read_csv('House_Rent_Dataset.csv')
    print("Dataset loaded successfully!")
except FileNotFoundError:
    print("Error: 'House_Rent_Dataset.csv' not found. Please upload the dataset to your Colab environment.")

# 2. Clean Data
if 'data' in locals():
    data = data.dropna()

    # 3. Feature Engineering
    features = ['BHK', 'Size', 'Floor', 'Area Type', 'City']
    target = 'Rent'
    X = data[features]
    y = data[target]
    X = pd.get_dummies(X, drop_first=True)

    # 4. Split
    test_size = 0.2
    random_state = 42
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_state
    )

    # 5. Train
    model = RandomForestRegressor(n_estimators=100, random_state=random_state)
    model.fit(X_train, y_train)

    # 6. Evaluate
    y_pred = model.predict(X_test)
    print(f"MAE: {mean_absolute_error(y_test, y_pred):.2f}")
    print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
    print(f"R2 Score: {r2_score(y_test, y_pred):.2f}")

    # 7. Save Model
    joblib.dump(model, 'house_rent_rf_model.pkl')

    # 8. Prediction Function
    def predict_rent(input_df):
        input_encoded = pd.get_dummies(input_df)
        # Align columns with the training data
        for col in X_train.columns:
            if col not in input_encoded:
                input_encoded[col] = 0
        input_encoded = input_encoded[X_train.columns]
        return model.predict(input_encoded)

    # Example Usage
    if __name__ == "__main__":
        sample = pd.DataFrame([{
            'BHK': 2, 'Size': 1000, 'Floor': '5 out of 10', # Adjusted 'Floor' to be more realistic
            'Area Type': 'Super built-up  Area', 'City': 'Mumbai'
        }])
        print(f"\nPredicted Rent: {predict_rent(sample)[0]:.2f}")

df = pd.read_csv('House_Rent_Dataset.csv')
     print(df.head())
     print(df.info())
     print(df.describe())

features = ['BHK', 'Size', 'Floor', 'Area Type', 'City']
     target = 'Rent'
     X = df[features]
     y = df[target]

X = pd.get_dummies(X, drop_first=True)

from sklearn.model_selection import train_test_split
   X_train, X_test, y_train, y_test = train_test_split(
       X, y, test_size=0.2, random_state=42
   )

from sklearn.ensemble import RandomForestRegressor
     model = RandomForestRegressor(n_estimators=100, random_state=42)
     model.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
   y_pred = model.predict(X_test)
   print('MAE:', mean_absolute_error(y_test, y_pred))
   print('MSE:', mean_squared_error(y_test, y_pred))
   print('R2:', r2_score(y_test, y_pred))

import joblib
   joblib.dump(model, 'house_rent_rf_model.pkl')  # Save
   model = joblib.load('house_rent_rf_model.pkl')  # Load later

def predict_rent(input_df):
       # One-hot encode and align columns
       input_encoded = pd.get_dummies(input_df)
       for col in X_train.columns:
           if col not in input_encoded:
               input_encoded[col] = 0
       input_encoded = input_encoded[X_train.columns]
       return model.predict(input_encoded)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# 1. Load Data
data = pd.read_csv('House_Rent_Dataset.csv')

# 2. Clean Data
data = data.dropna()

# 3. Feature Engineering
features = ['BHK', 'Size', 'Floor', 'Area Type', 'City']
target = 'Rent'
X = data[features]
y = data[target]
X = pd.get_dummies(X, drop_first=True)

# 4. Split
test_size = 0.2
random_state = 42
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=test_size, random_state=random_state
)

# 5. Train
model = RandomForestRegressor(n_estimators=100, random_state=random_state)
model.fit(X_train, y_train)

# 6. Evaluate
y_pred = model.predict(X_test)
print(f"MAE: {mean_absolute_error(y_test, y_pred):.2f}")
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"R2 Score: {r2_score(y_test, y_pred):.2f}")

# 7. Save Model
joblib.dump(model, 'house_rent_rf_model.pkl')

# 8. Prediction Function
def predict_rent(input_df):
    input_encoded = pd.get_dummies(input_df)
    for col in X_train.columns:
        if col not in input_encoded:
            input_encoded[col] = 0
    input_encoded = input_encoded[X_train.columns]
    return model.predict(input_encoded)

# Example Usage
if __name__ == "__main__":
    sample = pd.DataFrame([{
        'BHK': 2, 'Size': 1000, 'Floor': '5 out of 10', # Adjusted 'Floor' to be more realistic
        'Area Type': 'Super built-up  Area', 'City': 'Mumbai'
    }])
    print(f"\nPredicted Rent: {predict_rent(sample)[0]:.2f}")

"""# House Rent Prediction System

This Python project guides you through building a machine learning model to predict house rents based on property features. Below is a step-by-step breakdown, followed by the complete code implementation.

### Uploading your Colab Notebook to GitHub

Hereâ€™s how you can upload your Colab file to a GitHub repository:

1. **Save your Notebook to GitHub:**
   - Go to `File` -> `Save a copy in GitHub`.
   - You'll be asked to authorize Colab to access your GitHub account.
   - After authorizing, you can choose the repository and file path where you want to save the notebook.

2. **(Optional) Create a New Repository:**
   - If you don't have a repository yet, you can create one directly from the "Save a copy in GitHub" dialog.

3. **(Optional) Add a `requirements.txt` file:**
   - It's good practice to include a `requirements.txt` file in your repository to list all the libraries your project depends on. You can create this file with the following command:
"""

!pip freeze > requirements.txt

"""4. **Commit and Push:**
   - Once you've saved the notebook and (optionally) created the `requirements.txt` file, you'll need to commit and push the changes to your GitHub repository. You can do this from the command line if you have your repository cloned locally, or directly through the GitHub web interface.
"""